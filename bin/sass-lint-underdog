#!/usr/bin/env node

/* eslint no-process-exit: 0 no-console: 0 */

var defaultConfig = require('../');
var optimist = require('optimist');
var sassLint = require('sass-lint');

// The code to exist with, we will change to 1 if there are warnings
var errorCode = 0;

// Accept an additional config path to load overrides
var configPath = optimist.argv.config || optimist.argv.c;

// Try to resolve the config needed for parsing files
var resolvedConfig = sassLint.getConfig(defaultConfig, configPath);

// Get any file name/patterns passed in through the command line
// e.g. `sass-lint-underdog "./**/*.scss"` or `sass-lint-underdog ./style.scss ./_vars.scss`
var files = optimist.argv._;

// If no files were passed via command line, then fetch from config
if (!files.length) {
  // Get the list of files included in the provided config
  // {files: {include: []}}
  resolvedConfig.files = resolvedConfig.files || {};
  files = resolvedConfig.files.include || [];

  // Ensure `files` is an array
  if (!Array.isArray(files)) {
    files = [files];
  }
}

// If no files were passed or found in the config, make sure we fail
if (files.length === 0) {
  errorCode = 1;
  console.error('No files provided to sass-lint-underdog');
}

// sass-lint cannot lint a list of files, so we have to iterate for it
files.forEach(function handleEachFile (file) {
  // The follwing is the same as running `sass-lint --verbose [--config <config-file>]`
  var detects = sassLint.lintFiles(file, resolvedConfig);
  sassLint.outputResults(detects, defaultConfig, optimist.argv.config);

  if (sassLint.errorCount(detects).count) {
    errorCode = 1;
  }

  // Make sure we fail on warnings as well
  if (sassLint.warningCount(detects).count) {
    errorCode = 1;
  }

  sassLint.failOnError(detects);
});

process.on('exit', function () {
  process.exit(errorCode);
});
